// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	envoy "github.com/grab/ego/ego/src/go/envoy"
	mock "github.com/stretchr/testify/mock"

	stats "github.com/grab/ego/ego/src/go/envoy/stats"
)

// Scope is an autogenerated mock type for the Scope type
type Scope struct {
	mock.Mock
}

// CounterFromStatName provides a mock function with given fields: name
func (_m *Scope) CounterFromStatName(name string) envoy.Counter {
	ret := _m.Called(name)

	var r0 envoy.Counter
	if rf, ok := ret.Get(0).(func(string) envoy.Counter); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.Counter)
		}
	}

	return r0
}

// GaugeFromStatName provides a mock function with given fields: name, importMode
func (_m *Scope) GaugeFromStatName(name string, importMode stats.ImportMode) envoy.Gauge {
	ret := _m.Called(name, importMode)

	var r0 envoy.Gauge
	if rf, ok := ret.Get(0).(func(string, stats.ImportMode) envoy.Gauge); ok {
		r0 = rf(name, importMode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.Gauge)
		}
	}

	return r0
}

// HistogramFromStatName provides a mock function with given fields: name, unit
func (_m *Scope) HistogramFromStatName(name string, unit stats.Unit) envoy.Histogram {
	ret := _m.Called(name, unit)

	var r0 envoy.Histogram
	if rf, ok := ret.Get(0).(func(string, stats.Unit) envoy.Histogram); ok {
		r0 = rf(name, unit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.Histogram)
		}
	}

	return r0
}
