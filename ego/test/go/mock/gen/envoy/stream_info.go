// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	envoy "github.com/grab/ego/ego/src/go/envoy"
	mock "github.com/stretchr/testify/mock"

	volatile "github.com/grab/ego/ego/src/go/volatile"
)

// StreamInfo is an autogenerated mock type for the StreamInfo type
type StreamInfo struct {
	mock.Mock
}

// FilterState provides a mock function with given fields:
func (_m *StreamInfo) FilterState() envoy.FilterState {
	ret := _m.Called()

	var r0 envoy.FilterState
	if rf, ok := ret.Get(0).(func() envoy.FilterState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.FilterState)
		}
	}

	return r0
}

// GetRequestHeaders provides a mock function with given fields:
func (_m *StreamInfo) GetRequestHeaders() envoy.RequestHeaderMapReadOnly {
	ret := _m.Called()

	var r0 envoy.RequestHeaderMapReadOnly
	if rf, ok := ret.Get(0).(func() envoy.RequestHeaderMapReadOnly); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.RequestHeaderMapReadOnly)
		}
	}

	return r0
}

// LastDownstreamTxByteSent provides a mock function with given fields:
func (_m *StreamInfo) LastDownstreamTxByteSent() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ResponseCode provides a mock function with given fields:
func (_m *StreamInfo) ResponseCode() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ResponseCodeDetails provides a mock function with given fields:
func (_m *StreamInfo) ResponseCodeDetails() volatile.String {
	ret := _m.Called()

	var r0 volatile.String
	if rf, ok := ret.Get(0).(func() volatile.String); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(volatile.String)
	}

	return r0
}
