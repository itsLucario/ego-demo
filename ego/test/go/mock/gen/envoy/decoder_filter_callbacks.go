// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	ego_http "github.com/grab/ego/ego/src/cc/goc/proto"
	envoy "github.com/grab/ego/ego/src/go/envoy"

	mock "github.com/stretchr/testify/mock"
)

// DecoderFilterCallbacks is an autogenerated mock type for the DecoderFilterCallbacks type
type DecoderFilterCallbacks struct {
	mock.Mock
}

// ActiveSpan provides a mock function with given fields:
func (_m *DecoderFilterCallbacks) ActiveSpan() envoy.Span {
	ret := _m.Called()

	var r0 envoy.Span
	if rf, ok := ret.Get(0).(func() envoy.Span); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.Span)
		}
	}

	return r0
}

// AddDecodedData provides a mock function with given fields: buffer, streamingFilter
func (_m *DecoderFilterCallbacks) AddDecodedData(buffer envoy.BufferInstance, streamingFilter bool) {
	_m.Called(buffer, streamingFilter)
}

// ContinueDecoding provides a mock function with given fields:
func (_m *DecoderFilterCallbacks) ContinueDecoding() {
	_m.Called()
}

// DecodingBuffer provides a mock function with given fields:
func (_m *DecoderFilterCallbacks) DecodingBuffer() envoy.BufferInstance {
	ret := _m.Called()

	var r0 envoy.BufferInstance
	if rf, ok := ret.Get(0).(func() envoy.BufferInstance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.BufferInstance)
		}
	}

	return r0
}

// EncodeHeaders provides a mock function with given fields: responseCode, headers, endStream
func (_m *DecoderFilterCallbacks) EncodeHeaders(responseCode int, headers *ego_http.ResponseHeaderMap, endStream bool) {
	_m.Called(responseCode, headers, endStream)
}

// Route provides a mock function with given fields:
func (_m *DecoderFilterCallbacks) Route() envoy.Route {
	ret := _m.Called()

	var r0 envoy.Route
	if rf, ok := ret.Get(0).(func() envoy.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.Route)
		}
	}

	return r0
}

// RouteExisting provides a mock function with given fields:
func (_m *DecoderFilterCallbacks) RouteExisting() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SendLocalReply provides a mock function with given fields: responseCode, body, headers, details
func (_m *DecoderFilterCallbacks) SendLocalReply(responseCode int, body string, headers map[string]string, details string) {
	_m.Called(responseCode, body, headers, details)
}

// StreamInfo provides a mock function with given fields:
func (_m *DecoderFilterCallbacks) StreamInfo() envoy.StreamInfo {
	ret := _m.Called()

	var r0 envoy.StreamInfo
	if rf, ok := ret.Get(0).(func() envoy.StreamInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.StreamInfo)
		}
	}

	return r0
}
