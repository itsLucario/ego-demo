// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	envoy "github.com/grab/ego/ego/src/go/envoy"
	loglevel "github.com/grab/ego/ego/src/go/envoy/loglevel"

	mock "github.com/stretchr/testify/mock"
)

// GoHttpFilter is an autogenerated mock type for the GoHttpFilter type
type GoHttpFilter struct {
	mock.Mock
}

// DecoderCallbacks provides a mock function with given fields:
func (_m *GoHttpFilter) DecoderCallbacks() envoy.DecoderFilterCallbacks {
	ret := _m.Called()

	var r0 envoy.DecoderFilterCallbacks
	if rf, ok := ret.Get(0).(func() envoy.DecoderFilterCallbacks); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.DecoderFilterCallbacks)
		}
	}

	return r0
}

// EncoderCallbacks provides a mock function with given fields:
func (_m *GoHttpFilter) EncoderCallbacks() envoy.EncoderFilterCallbacks {
	ret := _m.Called()

	var r0 envoy.EncoderFilterCallbacks
	if rf, ok := ret.Get(0).(func() envoy.EncoderFilterCallbacks); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.EncoderFilterCallbacks)
		}
	}

	return r0
}

// GenericSecretProvider provides a mock function with given fields:
func (_m *GoHttpFilter) GenericSecretProvider() envoy.GenericSecretConfigProvider {
	ret := _m.Called()

	var r0 envoy.GenericSecretConfigProvider
	if rf, ok := ret.Get(0).(func() envoy.GenericSecretConfigProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.GenericSecretConfigProvider)
		}
	}

	return r0
}

// Log provides a mock function with given fields: _a0, _a1
func (_m *GoHttpFilter) Log(_a0 loglevel.Type, _a1 string) {
	_m.Called(_a0, _a1)
}

// Pin provides a mock function with given fields:
func (_m *GoHttpFilter) Pin() {
	_m.Called()
}

// Post provides a mock function with given fields: _a0
func (_m *GoHttpFilter) Post(_a0 uint64) {
	_m.Called(_a0)
}

// ResolveMostSpecificPerGoFilterConfig provides a mock function with given fields: name, route
func (_m *GoHttpFilter) ResolveMostSpecificPerGoFilterConfig(name string, route envoy.Route) interface{} {
	ret := _m.Called(name, route)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, envoy.Route) interface{}); ok {
		r0 = rf(name, route)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Unpin provides a mock function with given fields:
func (_m *GoHttpFilter) Unpin() {
	_m.Called()
}
