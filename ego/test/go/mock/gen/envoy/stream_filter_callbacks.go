// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	envoy "github.com/grab/ego/ego/src/go/envoy"
	mock "github.com/stretchr/testify/mock"
)

// StreamFilterCallbacks is an autogenerated mock type for the StreamFilterCallbacks type
type StreamFilterCallbacks struct {
	mock.Mock
}

// ActiveSpan provides a mock function with given fields:
func (_m *StreamFilterCallbacks) ActiveSpan() envoy.Span {
	ret := _m.Called()

	var r0 envoy.Span
	if rf, ok := ret.Get(0).(func() envoy.Span); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.Span)
		}
	}

	return r0
}

// Route provides a mock function with given fields:
func (_m *StreamFilterCallbacks) Route() envoy.Route {
	ret := _m.Called()

	var r0 envoy.Route
	if rf, ok := ret.Get(0).(func() envoy.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.Route)
		}
	}

	return r0
}

// RouteExisting provides a mock function with given fields:
func (_m *StreamFilterCallbacks) RouteExisting() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StreamInfo provides a mock function with given fields:
func (_m *StreamFilterCallbacks) StreamInfo() envoy.StreamInfo {
	ret := _m.Called()

	var r0 envoy.StreamInfo
	if rf, ok := ret.Get(0).(func() envoy.StreamInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(envoy.StreamInfo)
		}
	}

	return r0
}
